{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Graphene",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"comment": "Line comment",
			"match": "//.*",
			"name": "comment.line.double-slash.graphene"
		},
		{
			"comment": "Block comment",
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.graphene"
		},
		{
			"comment": "Boolean values",
			"match": "\\b(true|false)\\b",
			"name": "constant.language.graphene"
		},
		{
			"comment": "Floats",
			"match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b",
			"name": "constant.numeric.graphene"
		},
		{
			"comment": "Built-in types",
			"match": "\\b(i8|u8|i16|u16|i32|u32|i64|u64|i128|u128|int|isize|iptr|bool|void)\\b",
			"name": "storage.type.graphene"
		},
		{
			"comment": "Variable declaration",
			"match": "\\b(let|const)\\s+(\\w+)\\s*:\\s*(\\w+)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.graphene"
				},
				"2": {
					"name": "variable.name.graphene"
				},
				"3": {
					"name": "entity.name.type.graphene"
				}
			}
		},
		{
			"comment": "Function call",
			"match": "\\b(\\w+)\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.graphene"
				}
			}
		},
		{
			"comment": "typedef keyword",
			"match": "\\b(typedef)\\b",
			"name": "keyword.other.typedef.graphene"
		},
		{
			"comment": "Generics list after typedef",
			"begin": "(?<=(typedef)\\s*)(\\[)",
			"end": "\\]|$",
			"patterns": [
				{
					"include": "#type-list"
				}
			]
		},
		{
			"comment": "Type after typedef",
			"begin": "(?<=(typedef)(.*?\\])?\\s+)",
			"end": ":|$",
			"patterns": [
				{
					"include": "#type-name"
				}
			]
		},
		{
			"comment": "Struct after typedef",
			"begin": "(?<=(typedef).*?{)",
			"patterns": [
				{
					"include": "#argument-list"
				}
			],
			"end": "}|$"
		},
		{
			"comment": "Last type after typedef",
			"begin": "(?<=(typedef).*?:)(?!\\s*{)",
			"end": "$",
			"patterns": [
				{
					"include": "#type-name"
				}
			]
		},
		{
			"comment": "Function declaration keywords",
			"match": "(?:^|\\s)(function|foreign|@operator|@constructor|@destructor)\\b",
			"name": "keyword.other.function.graphene"
		},
		{
			"comment": "Generics list in function declarations",
			"begin": "(?<=(function|@operator)\\s*)(\\[)",
			"end": "\\]|$",
			"patterns": [
				{
					"include": "#type-list"
				}
			]
		},
		{
			"comment": "Function names",
			"match": "(?<=(function|foreign)(.*?\\])?\\s+)(\\w+)",
			"name": "entity.name.function.graphene"
		},
		{
			"comment": "@operator name",
			"match": "(?<=(operator)(.*?\\])?\\s+)(\\S+)",
			"name": "entity.name.function.graphene"
		},
		{
			"comment": "Arguments list in function declarations",
			"begin": "(?<=(function|foreign|@operator|@constructor|@destructor).*?\\()",
			"end": "\\)|$",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		{
			"comment": "Return type in function declarations",
			"begin": "(?<=(function|foreign|@operator|@constructor|@destructor).*?(-\\>))",
			"end": "=|$",
			"patterns": [
				{
					"include": "#type-name"
				}
			]
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.graphene",
					"match": "\\b(if|else|while|for|in|return)\\b"
				},
				{
					"name": "keyword.other.require.graphene",
					"match": "(?<=^|\\s)@require_once\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.graphene",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.graphene",
					"match": "\\\\."
				}
			]
		},
		"argument-list": {
			"patterns": [
				{
					"comment": "Argument Name",
					"match": "(?<=,|\\(|{)\\s*(\\w+)",
					"name": "variable.parameter.graphene"
				},
				{
					"comment": "Argument Type",
					"match": "(?<=:)\\s*(\\w+)",
					"name": "entity.name.type.graphene"
				}
			]
		},
		"type-list": {
			"patterns": [
				{
					"comment": "Type Name",
					"match": "\\b\\w+\\b",
					"name": "entity.name.type.graphene"
				}
			]
		},
		"type-name": {
			"patterns": [
				{
					"comment": "Type Identifier",
					"match": "\\b\\w+\\b",
					"name": "entity.name.type.graphene"
				}
			]
		}
	},
	"scopeName": "source.graphene"
}
