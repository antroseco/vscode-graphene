{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Graphene",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"comment": "Line comment",
			"match": "//.*",
			"name": "comment.line.double-slash.graphene"
		},
		{
			"comment": "Block comment",
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.graphene"
		},
		{
			"comment": "this variable",
			"match": "\\bthis\\b",
			"name": "variable.language.this.graphene"
		},
		{
			"comment": "Boolean values",
			"match": "\\b(true|false)\\b",
			"name": "constant.language.graphene"
		},
		{
			"comment": "Floats",
			"match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b",
			"name": "constant.numeric.graphene"
		},
		{
			"comment": "Built-in types",
			"match": "\\b(i8|u8|i16|u16|i32|u32|i64|u64|int|isize|string|bool|void)\\b",
			"name": "storage.type.graphene"
		},
		{
			"comment": "Function declaration",
			"begin": "\\b(function)(\\[.*\\])?\\s+(\\w+)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.graphene"
				},
				"3": {
					"name": "entity.name.function.graphene"
				}
			},
			"end": "->\\s*([a-zA-Z]\\w*).+=",
			"endCaptures": {
				"1": {
					"name": "entity.name.type.graphene"
				}
			},
			"patterns": [
				{
					"match": "(\\w+)\\s*:\\s*(\\w+)",
					"captures": {
						"1": {
							"name": "variable.name.graphene"
						},
						"2": {
							"name": "entity.name.type.graphene"
						}
					}
				}
			]
		},
		{
			"comment": "Constructor/Destructor declaration",
			"begin": "(^|\\s)(@constructor|@destructor)\\b",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.graphene"
				}
			},
			"end": "->\\s*([a-zA-Z]\\w*).+=",
			"endCaptures": {
				"1": {
					"name": "entity.name.type.graphene"
				}
			},
			"patterns": [
				{
					"match": "(\\w+)\\s*:\\s*(\\w+)",
					"captures": {
						"1": {
							"name": "variable.name.graphene"
						},
						"2": {
							"name": "entity.name.type.graphene"
						}
					}
				}
			]
		},
		{
			"comment": "Foreign declaration",
			"begin": "\\b(foreign)\\s+(\\w+)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.graphene"
				},
				"2": {
					"name": "entity.name.function.graphene"
				}
			},
			"end": "->\\s*([a-zA-Z]\\w*).+;",
			"endCaptures": {
				"1": {
					"name": "entity.name.type.graphene"
				}
			},
			"patterns": [
				{
					"match": "(\\w+)\\s*:\\s*(\\w+)",
					"captures": {
						"1": {
							"name": "variable.name.graphene"
						},
						"2": {
							"name": "entity.name.type.graphene"
						}
					}
				}
			]
		},
		{
			"comment": "Operator declaration",
			"begin": "(^|\\s)(@operator)\\s+([.<>%*$@|&\\/=?!+^\\-]+)\\s*:",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.graphene"
				},
				"3": {
					"name": "entity.name.function.graphene"
				}
			},
			"end": "->\\s*([a-zA-Z]\\w*).+=",
			"endCaptures": {
				"1": {
					"name": "entity.name.type.graphene"
				}
			},
			"patterns": [
				{
					"match": "(\\w+)\\s*:\\s*(\\w+)",
					"captures": {
						"1": {
							"name": "variable.name.graphene"
						},
						"2": {
							"name": "entity.name.type.graphene"
						}
					}
				}
			]
		},
		{
			"comment": "Variable declaration",
			"match": "\\b(let|const)\\s+(\\w+)\\s*:\\s*(\\w+)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.graphene"
				},
				"2": {
					"name": "variable.name.graphene"
				},
				"3": {
					"name": "entity.name.type.graphene"
				}
			}
		},
		{
			"comment": "Function call",
			"match": "\\b(\\w+)\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.graphene"
				}
			}
		},
		{
			"comment": "Typedef declaration (struct)",
			"begin": "\\b(typedef)(\\[.*\\])?\\s*(\\w+)\\s*:\\s*{",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.graphene"
				},
				"3": {
					"name": "entity.name.type.graphene"
				}
			},
			"end": "}",
			"patterns": [
				{
					"match": "(\\w+)\\s*:\\s*(\\w+)",
					"captures": {
						"1": {
							"name": "variable.name.graphene"
						},
						"2": {
							"name": "entity.name.type.graphene"
						}
					}
				}
			]
		},
		{
			"comment": "Typedef declaration (non-struct)",
			"match": "\\b(typedef)(\\[.*\\])?\\s*(\\w+)\\s*:\\s*(\\w+)(\\[.*\\])?",
			"captures": {
				"1": {
					"name": "keyword.other.graphene"
				},
				"3": {
					"name": "entity.name.type.graphene"
				},
				"4": {
					"name": "entity.name.type.graphene"
				}
			}
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.graphene",
					"match": "\\b(if|while|for|return)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.graphene",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.graphene",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.graphene"
}
